swagger: "2.0"
info:
  version: "1.0.0"
  title: "Swagger Hackboard"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
- name: "project"
  description: "The Projects API"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"

schemes:
- "http"
paths:
  /projects:
    get:
      tags:
      - "project"
      summary: "List all projects"
      operationId: "listProjects"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ProjectDto"
    post:
      tags:
      - "project"
      summary: "Add a new project"
      operationId: "addProject"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "project"
        required: true
        schema:
          $ref: "#/definitions/ProjectDto"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
    put:
      tags:
      - "project"
      summary: "Edit project"
      operationId: "editProject"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "project"
        required: true
        schema:
          $ref: "#/definitions/ProjectDto"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /projects/{projectId}:
    get:
      tags:
      - "project"
      summary: "View Project"
      operationId: "viewProject"
      produces:
      - "application/json"
      parameters:
      - name: "projectId"
        in: "path"
        description: "ID of project"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ProjectDto"

    delete:
      tags:
      - "project"
      summary: "Delete Project"
      operationId: "deleteProject"
      produces:
      - "application/json"
      parameters:
      - name: "projectId"
        in: "path"
        description: "ID of project"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"
  /projectRole:
    get:
      tags:
      - "projectRole"
      summary: "List all /projectRole"
      operationId: "listProjectRoles"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ProjectRoleDto"
  /application:
    post:
      tags:
      - "application"
      summary: "Add a new application"
      operationId: "addapplication"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "application"
        required: true
        schema:
          $ref: "#/definitions/ApplicationDto"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "boolean"

  /application/{projectId}:
        get:
          tags:
          - "application"
          summary: "Get All Roles for Application"
          operationId: "getRoleApplication"
          produces:
          - "application/json"
          parameters:
          - name: "projectId"
            in: "path"
            description: "ID of project"
            required: true
            type: "integer"
            format: "int64"
          responses:
            200:
              description: "successful operation"
              schema:
                type: array
                items:
                  type: "integer"
                  format: "int64"
  /application/{projectId}/{roleId}:
        delete:
            tags:
            - "application"
            summary: "Delete an application"
            operationId: "delapplication"
            produces:
            - "application/json"
            parameters:
            - name: "projectId"
              in: "path"
              description: "ID of project"
              required: true
              type: "integer"
              format: "int64"
            - name: "roleId"
              in: "path"
              description: "ID of role"
              required: true
              type: "integer"
              format: "int64"
            responses:
              200:
                description: "successful operation"
                schema:
                    type: "boolean"
  /application/{projectId}/{roleId}/{statusId}:
        put:
            tags:
            - "application"
            summary: "update  an application status"
            operationId: "editstatusapplication"
            produces:
            - "application/json"
            parameters:
            - name: "projectId"
              in: "path"
              description: "ID of project"
              required: true
              type: "integer"
              format: "int64"
            - name: "roleId"
              in: "path"
              description: "ID of role"
              required: true
              type: "integer"
              format: "int64"
            - name: "statusId"
              in: "path"
              description: "ID of Status "
              required: true
              type: "integer"
              format: "int64"
            responses:
              200:
                description: "successful operation"
                schema:
                    type: "boolean"

  /tags:
      get:
        tags:
        - "tag"
        summary: "List all /tags"
        operationId: "showAllTags"
        produces:
        - "application/json"
        responses:
          200:
            description: "successful operation"
            schema:
              type: "array"
              items:
                type: "string"

      post:
        tags:
        - "tag"
        summary: "Add a new tag"
        operationId: "addTag"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: "tag"
          required: true
          schema:
            $ref: "#/definitions/TagDto"
        responses:
          200:
            description: "successful operation"
            schema:
              type: "boolean"


  /tags/{tagId}:
      get:
        tags:
        - "tag"
        summary: "View tag"
        operationId: "viewTag"
        produces:
        - "application/json"
        parameters:
        - name: "tagId"
          in: "path"
          description: "ID of tag"
          required: true
          type: "integer"
          format: "int64"
        responses:
          200:
            description: "successful operation"
            schema:
              $ref: "#/definitions/TagDto"

      delete:
        tags:
        - "tag"
        summary: "Delete tag"
        operationId: "deleteTag"
        produces:
        - "application/json"
        parameters:
        - name: "tagId"
          in: "path"
          description: "ID of tag"
          required: true
          type: "integer"
          format: "int64"
        responses:
          200:
            description: "successful operation"
            schema:
              type: "boolean"

definitions:
  ProjectDto:
    type: "object"
    required:
      - "title"
      - "description"
      - "owner_id"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      description:
        type: "string"
      ownerId:
        type: "integer"
        format: "int64"
      ownerFirstName:
        type: "string"
      ownerLastName:
        type: "string"
      ownerLoginName:
        type: "string"
      color:
         type: "string"
      github:
        type: "string"
      projectStories:
        type: array
        items:
          type: "string"
      projectRole:
        type: array
        items:
            $ref: '#/definitions/ProjectRoleDto'
      applicationDto:
        type: array
        items:
          $ref: '#/definitions/ApplicationDto'
      tags:
        type: array
        items:
          type: "string"

  ProjectRoleDto:
          type: "object"
          required:
            - "roleName"
            - "color"
          properties:
            id:
              type: "integer"
              format: "int64"
            roleName:
              type: "string"
            color:
               type: "string"
            count:
               type: "integer"
               format: "int64"
  TagDto:
        type: "object"
        required:
          - "tag"
        properties:
          tag:
            type: "string"

  ApplicationDto:
        type: "object"
        required:
          - "id"
          - "applicant"
          - "projectId"
          - "roleId"
          - "status"
        properties:
          id:
            type: "integer"
            format: "int64"
          applicant:
            type: "integer"
            format: "int64"
          projectId:
            type: "integer"
            format: "int64"
          roleId:
             type: "integer"
             format: "int64"
          applicantFullName:
             type: "string"
          roleName:
             type: "string"
          roleColor:
             type: "string"
          userGithub:
             type: "string"
          status:
             type: "integer"
             format: "int64"

